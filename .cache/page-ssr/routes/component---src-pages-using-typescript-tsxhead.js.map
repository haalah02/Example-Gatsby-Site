{"version":3,"file":"component---src-pages-using-typescript-tsxhead.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["React","Link","Layout","Seo","UsingTypescript","data","path","location","createElement","title","site","buildTime","href","to","Head","query","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","className","Date","getFullYear","description","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","staticQueryData","metaDescription","siteMetadata","defaultTitle","Fragment","name","content","property","social","twitter"],"sourceRoot":""}